from asyncio import Lock
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

import arrow

from bot.env import *
from bot.states import *

lock = Lock()


async def star_login(message: Message):
    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ "–ù–ê–ó–í–ê–ù–ò–ï". –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è\n'
        f'–ü—Ä–∏–º–µ—Ä: 89294577219'
    )

    await LogInFSM.phone.set()


async def phone_login(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        return

    if 0 < len(message.text) < 11:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        return

    #–†–ï–ì–ï–°–¢–†–ò–†–£–ô –í –ë–î –ó–î–ï–°–¨ –ê–ë–ê–ó–ê

    await message.answer("NICE")

    await state.reset_state(with_data=True)


def register_login_handlers(dp:Dispatcher):
    dp.register_message_handler(star_login, commands=['start'] )
    dp.register_message_handler(phone_login, state=LogInFSM.phone)