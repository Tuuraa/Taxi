from asyncio import Lock
from datetime import datetime

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

import bot.Database.methods.create as db_create
import bot.Database.methods.get as db_select
import bot.Database.methods.update as db_update

import bot.keyboards.inline as inline
import bot.keyboards.reply as reply

from bot.handlers.utils import *

from .login import register_login_handlers
from .refill import register_refill_handlers
from .withdraw import registration_withdrow_handlers

from bot.env import *
from ...states import *


lock = Lock()


async def star_login(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    if await db_select.exists_passenger(message.from_user.id) and message.from_user.id in admins:
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
            reply_markup=reply.admin_panel_btns()
        )

    elif await db_select.exists_passenger(message.from_user.id) or await db_select.exists_driver(message.from_user.id):

        user_data = await db_select.type_user(message.from_user.id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
            reply_markup=reply.profile_passenger_markup() if user_data == 'passenger' else reply.profile_driver_markup()
        )

    else:
        await message.answer(
            f'<b>Transfer</b> —Ç–∞–∫—Å–∏-–±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π '
            f'–Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –≤—ã –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ, –∞ –≥–ª–∞–≤–Ω–æ–µ –¥–µ—à–µ–≤–æ –¥–æ–µ—Ö–∞–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ –≤–∞–º –º–µ—Å—Ç–æ.\n'
            f'<b>Transfer</b> –≤—ã–≥–æ–¥–µ–Ω –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è '
            f'–∫–∞–∫–æ–≥–æ –ª–∏–±–æ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –Ω–∏—Ö.',
            reply_markup=inline.check_status_btns(),
            parse_mode='html'
        )


async def profile(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)
    user_data = (await db_select.profile_data(message.from_user.id))

    if user_data[0] == 'pass':

        await message.answer(
            f'ü§ñ –í–∞—à ID: <b>{user_data[1][0]}</b>\n'
            f'üë§ –§–ò–û: <b>{user_data[1][1]}\n</b>'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_data[1][2]}</b>\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data[1][3]}</b> —Ä—É–±'
            f'<a href=\"https://i.ibb.co/9sfJy3J/image.png\">.</a>',
            parse_mode='html',
            reply_markup=inline.profile_passenger_btn()
        )
    else:
        await message.answer(
            f'ü§ñ –í–∞—à ID: <b>{user_data[1][0]}</b>\n'
            f'üë§ –§–ò–û: <b>{user_data[1][1]}</b>\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_data[1][2]}</b>\n\n'
            f'üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: <b>{user_data[1][3]}</b>\n'
            f'üöï –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>{user_data[1][4]}</b>\n'
            f'‚õ∞Ô∏è –†–µ—Å–ø—É–±–ª–∏–∫–∞: <b>{user_data[1][5]}</b>\n'
            f'üíµ –ë–∞–ª–∞–Ω—Å: <b>{user_data[1][6]}</b> —Ä—É–±\n'
            f'<a href=\"https://i.ibb.co/9sfJy3J/image.png\">.</a>',
            parse_mode='html',
            reply_markup=inline.profile_driver_btn()
        )


async def number_of_passengers(message: Message, state: FSMContext):

    if not message.text.isdigit():
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        return

    if int(message.text) > 30:
        await message.answer(
            "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
        )
        return

    async with state.proxy() as proxy:
        proxy['numbers_of_users'] = int(message.text)

    await message.answer(
        '–ü–æ–µ–∑–¥–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è:',
        reply_markup=inline.baggage_availability()
    )

    await UserLocationFSM.is_baggage.set()


async def with_baggage(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with state.proxy() as proxy:
        proxy['is_baggage'] = '–° –±–∞–≥–∞–∂–æ–º'

    await bot.send_message(
        callback.from_user.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –≤—Ä—É—á–Ω—É—é –ø–æ –ø—Ä–∏–º–µ—Ä—É\n'
        '–ß–µ—Ä–∫–µ—Å—Å–∫, –ö–∞–≤–∫–∞–∑—Å–∫–∞—è 73',
        reply_markup=reply.set_current_locale()
    )

    await UserLocationFSM.current_location.set()


async def without_baggage(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with state.proxy() as proxy:
        proxy['is_baggage'] = '–ë–µ–∑ –±–∞–≥–∞–∂–∞'

    await bot.send_message(
        callback.from_user.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –ø–æ –ø—Ä–∏–º–µ—Ä—É\n'
        '–ß–µ—Ä–∫–µ—Å—Å–∫, –ö–∞–≤–∫–∞–∑—Å–∫–∞—è 73',
        reply_markup=reply.set_current_locale()
    )

    await UserLocationFSM.current_location.set()


async def current_user_location_handler(message: Message, state: FSMContext):
    location = current_user_location(message)

    if location:

        async with state.proxy() as proxy:
            proxy['current_location'] = location[0], location[1], location[2]

        await message.answer(
            "–ê —Ç–µ–ø–µ—Ä—å –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏.\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé, –∏ –æ–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∏–ª–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å\n\n"
            "<b><i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω.</i></b>",
            parse_mode='html',
            reply_markup=reply.order_location()
        )

        await UserLocationFSM.next()
    else:
        await message.answer(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π'
        )


async def order_location(message: Message, state: FSMContext):
    location = current_user_location(message)

    if location:
        async with state.proxy() as proxy:
            proxy['order_location'] = location[0], location[1], location[2]

            location_list = proxy['current_location'][0].address.split(', ')
            republic = ''
            user_data = await db_select.type_user(message.from_user.id)

            for loc in location_list:
                if loc in republics:
                    republic = loc
                    break

            if not republic:
                await message.answer(
                    '–í –¥–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!!',
                    reply_markup=reply.profile_passenger_markup() if user_data == 'passenger'
                        else reply.profile_driver_markup()
                )
                await state.reset_state(with_data=True)
                return

            await message.answer(
                f'–û—Ç–∫—É–¥–∞:\n{proxy["current_location"][0]}'
            )

            await message.answer(
                f'–ö—É–¥–∞:\n{location[0]}'
            )

            first_loc = proxy['current_location'][1], proxy['current_location'][2]
            second_loc = proxy['order_location'][1], proxy['order_location'][2]

            distance = round(distance_btw_two_points(
                current_point=first_loc,
                order_point=second_loc
            ).km, 3)

            if distance < 2:
                amount = 75
            elif 50 >= distance > 2:
                distance = int(distance)
                coef = ways[distance]
                if distance < 4:
                    amount = 75 + coef * (distance - 1) + 5 * (3 + ((distance / 50) * 60) - 5)
                else:
                    amount = 75 + coef * (distance - 1) + 5 * (1 + ((distance / 50) * 60) - 5)
            else:
                distance = int(distance)
                coef = ways[len(ways)]
                amount = 75 + coef * (distance - 1) + 5 * (1 + distance / 50 - 5)
                other_sum = int((distance - len(ways)) / 3) * 82
                amount += other_sum

            amount = round(amount, 2)

            proxy['distance'] = distance
            proxy['time'] = distance / 50
            proxy['amount'] = amount
            proxy['republic'] = republic

            await message.answer(
                f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç: {distance} –∫–º.\n'
                f'–í—Ä–µ–º—è –ø—É—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç: {distance / 50} —á.\n'
                f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±.\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å',
                reply_markup=inline.pay_order()
            )

            await UserLocationFSM.type_pay.set()
    else:
        await message.answer(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π'
        )


async def current_delivery_location(message: Message, state: FSMContext):
    location = current_user_location(message)

    async with state.proxy() as proxy:
        proxy['current_delivery_location'] = location[0], location[1], location[2]

    await message.answer(
        "–ê —Ç–µ–ø–µ—Ä—å –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé, –∏ –æ–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å\n\n"
        "<b><i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω.</i></b>",
        reply_markup=reply.order_location()
    )

    await DeliveryFSM.next()


async def delivery_order_location(message: Message, state: FSMContext):
    location = current_user_location(message)

    async with state.proxy() as proxy:
        proxy['delivery_order_location'] = location[0], location[1], location[2]

        location_list = proxy['current_delivery_location'][0].address.split(', ')
        republic = ''
        user_data = await db_select.type_user(message.from_user.id)

        for loc in location_list:
            if loc in republics:
                republic = loc
                break

        if not republic:
            await message.answer(
                '–í –¥–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!!',
                reply_markup=reply.profile_passenger_markup() if user_data == 'passenger' else reply.profile_driver_markup()
            )
            await state.reset_state(with_data=True)
            return

        await message.answer(
            f'–û—Ç–∫—É–¥–∞:\n{proxy["current_delivery_location"][0]}'
        )

        await message.answer(
            f'–ö—É–¥–∞:\n{location[0]}'
        )

        first_loc = proxy['current_delivery_location'][1], proxy['current_delivery_location'][2]
        second_loc = proxy['delivery_order_location'][1], proxy['delivery_order_location'][2]

        distance = round(distance_btw_two_points(
            current_point=first_loc,
            order_point=second_loc
        ).km, 3)

        amount = 75 + 10 * (distance - 1) + 5 * (1 + distance / 50 - 5)

        proxy['delivery_distance'] = distance
        proxy['delivery_time'] = round(distance / 50, 2)
        proxy['delivery_amount'] = amount
        proxy['republic'] = republic

        await message.answer(
            f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç: {distance} –∫–º.\n'
            f'–í—Ä–µ–º—è –ø—É—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç: {distance / 50} —á.\n'
            f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±.\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å',
            reply_markup=inline.pay_delivery()
        )

        await DeliveryFSM.delivery_type_pay.set()


async def pay_by_cash(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with state.proxy() as proxy:
        proxy['type_pay'] = 'cash'

        await db_create.create_order(
             callback.from_user.id,
             proxy["current_location"][0],
             proxy["order_location"][0],
             proxy['distance'],
             proxy['amount'],
             proxy['republic'],
             datetime.now(),
             'cash',
             proxy['time'],
             proxy['numbers_of_users'],
             proxy['is_baggage']
         )

        await bot.send_message(
            callback.from_user.id,
            '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.',
            reply_markup=reply.profile_passenger_markup()
        )

        await send_order_to_all_drivers(proxy['republic'], proxy['amount'])

        await state.reset_state(with_data=True)


async def del_pay_by_cash(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with state.proxy() as proxy:
        proxy['delivery_type_pay'] = 'cash'

        await db_create.create_delivery(
            callback.from_user.id,
            proxy['current_delivery_location'][0],
            proxy['delivery_order_location'][0],
            proxy['delivery_distance'],
            proxy['delivery_amount'],
            proxy['republic'],
            datetime.now(),
            'cash'
        )

        await bot.send_message(
            callback.from_user.id,
            '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            reply_markup=reply.profile_passenger_markup()
        )
        await state.reset_state(with_data=True)


async def del_pay_by_wallet(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with lock:
        async with state.proxy() as proxy:
            user_balance = await db_select.balance_by_user(callback.from_user.id)

            if user_balance < int(proxy['delivery_amount']):
                await bot.send_message(
                    callback.from_user.id,
                    '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
                    reply_markup=inline.not_enough_amount()
                )
                return

            await db_create.create_delivery(
                proxy["current_location"][0],
                proxy["order_location"][0],
                proxy['distance'],
                proxy['amount'],
                proxy['republic'],
                datetime.now(),
                'wallet',
                proxy['time'],

            )

            await bot.send_message(
                callback.from_user.id,
                '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.',
                reply_markup=reply.profile_passenger_markup()
            )

            await state.reset_state(with_data=True)


async def pay_by_wallet(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with lock:
        async with state.proxy() as proxy:

            user_balance = await db_select.balance_by_user(callback.from_user.id)

            if user_balance < int(proxy['amount']):
                await bot.send_message(
                    callback.from_user.id,
                    '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
                    reply_markup=inline.not_enough_amount()
                )
                return

            await db_create.create_order(
                callback.from_user.id,
                proxy["current_location"][0],
                proxy["order_location"][0],
                proxy['distance'],
                proxy['amount'],
                proxy['republic'],
                datetime.now(),
                'wallet',
                proxy['time'],
                proxy['numbers_of_users'],
                proxy['is_baggage']
            )

            await bot.send_message(
                callback.from_user.id,
                '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.',
                reply_markup=reply.profile_passenger_markup()
            )

            await send_order_to_all_drivers(proxy['republic'], proxy['amount'])

            await state.reset_state(with_data=True)


async def order_delivery(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –ª–∏–±–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é',
        reply_markup=reply.set_current_locale()
    )

    await DeliveryFSM.current_delivery_location.set()


async def order_taxi(message: Message, state: FSMContext):

    if not await db_select.check_user_from_order(message.from_user.id):
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
        return

    await state.reset_state(with_data=True)

    await message.answer(
        "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ–µ–¥–µ—Ç.\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–æ"
    )

    await UserLocationFSM.numbers_of_users.set()


async def back(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)

    await message.answer(
        '–í–µ—Ä–Ω—É–ª—Å—è',
        reply_markup=reply.profile_passenger_markup()
    )


async def support(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    await message.answer(
        f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ {admin_link}\n'
        '–û—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞!'
    )


async def active_orders(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    republic = await db_select.republic_by_driver(message.from_user.id)

    orders = await db_select.all_active_orders(republic)

    if not orders:
        await message.answer(
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç'
        )

    for order in orders:
        await message.answer(
            f'–ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n\n'
            f'–û—Ç–∫—É–¥–∞: {order[1]}\n\n'
            f'–ö—É–¥–∞: {order[2]}\n\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {order[-2]}\n'
            f'{order[-1]}\n\n'
            f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {order[3]} –∫–º.\n'
            f'–û–ø–ª–∞—Ç–∞: {order[4]} —Ä—É–±.\n'
            f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {order[8]}\n'
            f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {"–ù–∞–ª–∏—á–Ω—ã–µ" if order[9] == "cash" else "–° –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞"}',
            reply_markup=inline.responde_order(order)
        )


async def responde(callback: CallbackQuery):
    async with lock:
        await bot.delete_message(
            callback.from_user.id,
            callback.message.message_id
        )

        order_data = callback.data.split(':')

        user_data = await db_select.information_by_user(int(order_data[1]))
        order_data_by_db = await db_select.information_by_order(int(order_data[2]))
        order_user_data = await db_select.information_by_driver(callback.from_user.id)

        await db_update.change_status_to_order('PROCESSING', order_data[2])

        await bot.send_message(
            int(order_data[1]),
            f'–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º @{callback.from_user.username}\n\n'
            f'–î–∞–Ω–Ω—ã–µ –æ –Ω–µ–º:\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω: <b>{order_user_data[5]}</b>\n'
            f'–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: <b>{order_user_data[3]}</b>\n'
            f'–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>{order_user_data[4]}</b>',
            parse_mode='html'
        )

        await bot.send_message(
            callback.from_user.id,
            '–î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:\n\n'
            f'–û—Ç–∫—É–¥–∞: {order_data_by_db[1]}\n\n'
            f'–ö—É–¥–∞: {order_data_by_db[2]}\n\n'
            f'–ö –æ–ø–ª–∞—Ç–µ: {order_data_by_db[4]}\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–∞: <b>{user_data[3]}</b>\n'
            f'–°—Å—ã–ª–∫–∞: @{user_data[4]}\n\n'
            f'<b>–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å —Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞. <i>–ù–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≤—ã –µ—â–µ '
            f'–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–∫–∞–∑, –≤ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É</i></b>',
            reply_markup=inline.apply_order(user_data[1], order_user_data[1], order_data_by_db[0]),
            parse_mode='html'
        )


async def apply_order(callback: CallbackQuery):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    order_data = [int(item) for item in callback.data.split(':')[1:-1]]
    await db_update.change_status_to_order('COMPLETED', order_data[1])
    await db_update.change_complete_order(datetime.now(), order_data[1])
    order = await db_select.information_by_order(order_data[1])
    accrual_amount = order[4] - ((order[4] / 100) * 5)
    commision = (order[4] / 100) * 5

    if order[9] == 'wallet':
        await db_update.add_balance_from_driver(accrual_amount, order_data[2])
        await db_update.remove_balance_from_user(order[4], order_data[0])

        await bot.send_message(
            callback.from_user.id,
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_data[1]}. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {accrual_amount} —Ä.'
        )

        await bot.send_message(
            order_data[0],
            f'–ó–∞–∫–∞–∑ ‚Ññ{order_data[1]} –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ {order[4]} —Ä.\n'
            f'–í —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        )
    else:
        await db_update.remove_balance_from_driver(commision, order_data[2])

        await bot.send_message(
            callback.from_user.id,
            f'–ó–∞–∫–∞–∑ ‚Ññ{order_data[1]} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª —Å–Ω—è—Ç–∞ –∫–æ–º–º–∏—Å–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ –ø—è—Ç–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'
            f'–æ—Ç —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {commision}'
        )

        await bot.send_message(
            order_data[0],
            f'–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_data[1]}'
        )


async def change_republics(callback: CallbackQuery):
    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )
    await bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å–ø—É–±–ª–∏–∫—É:",
        reply_markup=reply.all_republics()
    )

    await ChangeRepublicFSM.republic.set()


async def new_republic(message: Message, state: FSMContext):

    await db_update.change_region(
        message.from_user.id,
        message.text
    )

    await message.answer(
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',
        reply_markup=reply.profile_driver_markup()
    )

    await state.reset_state(with_data=True)


async def education(message: Message):

    await message.reply_document(
        document='BQACAgIAAxkBAAIHfmQkZmslL8QnV21XY5qbR7sPFVb_AAJbLQAC2xsgSREfCe7Z9b3jLwQ'
    )


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(education, content_types=['document'])
    dp.register_message_handler(star_login, commands=['start'], state='*')
    dp.register_message_handler(profile, lambda msg: msg.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', state="*")
    dp.register_message_handler(order_delivery, lambda mes: mes.text == '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', state="*")
    dp.register_message_handler(order_taxi, lambda mes: mes.text == 'üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏', state="*")
    dp.register_message_handler(active_orders, lambda mes: mes.text == 'üöï –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', state="*")
    dp.register_message_handler(support, lambda mes: mes.text == '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', state="*")
    dp.register_message_handler(education, lambda mes: mes.text == 'üìÑ –û–±—É—á–µ–Ω–∏–µ', state="*")
    dp.register_message_handler(back, lambda mes: mes.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', state='*')

    dp.register_callback_query_handler(change_republics, text='change_region')
    dp.register_message_handler(new_republic, state=ChangeRepublicFSM.republic)
    dp.register_message_handler(current_user_location_handler, state=UserLocationFSM.current_location,
                                content_types=['location', 'text'])
    dp.register_message_handler(current_delivery_location, state=DeliveryFSM.current_delivery_location,
                                content_types=['location', 'text'])
    dp.register_message_handler(delivery_order_location, state=DeliveryFSM.delivery_order_location,
                                content_types=['location', 'text'])
    dp.register_message_handler(order_location, state=UserLocationFSM.order_location,
                                content_types=['location', 'text'])

    dp.register_callback_query_handler(del_pay_by_cash, text='del_pay_by_cash',
                                       state=DeliveryFSM.delivery_type_pay)
    dp.register_callback_query_handler(del_pay_by_wallet, text='del_pay_by_wallet',
                                       state=DeliveryFSM.delivery_type_pay)
    dp.register_callback_query_handler(pay_by_cash, text='pay_by_cash', state=UserLocationFSM.type_pay)
    dp.register_callback_query_handler(pay_by_wallet, text='pay_by_wallet', state=UserLocationFSM.type_pay)

    dp.register_callback_query_handler(responde, inline.cb_data.filter(data='responde'))
    dp.register_callback_query_handler(apply_order, inline.cb_apply.filter(data='apply_order'))

    dp.register_message_handler(number_of_passengers, state=UserLocationFSM.numbers_of_users)
    dp.register_callback_query_handler(with_baggage, state=UserLocationFSM.is_baggage, text='with_baggage')
    dp.register_callback_query_handler(without_baggage, state=UserLocationFSM.is_baggage, text='without_baggage')

    register_login_handlers(dp)
    registration_withdrow_handlers(dp)
    register_refill_handlers(dp)
