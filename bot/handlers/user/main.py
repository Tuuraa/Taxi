from asyncio import Lock

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

import bot.Database.methods.get as db_select

import bot.keyboards.reply as reply

from bot.handlers.utils import *

from .login import register_login_handlers
from .refill import register_refill_handlers
from .withdraw import registration_withdrow_handlers
from .register_order import register_create_order_handlers
from .order_tools import register_order_tools_handlers

from .count_down import *

from bot.env import *
from ...states import *


lock = Lock()


async def star_login(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    if await db_select.exists_passenger(message.from_user.id) and message.from_user.id in admins:
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
            reply_markup=reply.admin_panel_btns()
        )

    elif await db_select.exists_passenger(message.from_user.id) or await db_select.exists_driver(message.from_user.id):

        user_data = await db_select.type_user(message.from_user.id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
            reply_markup=reply.profile_passenger_markup() if user_data == 'passenger' else reply.profile_driver_markup()
        )

    else:
        await message.answer(
            f'<b>Transfer</b> —Ç–∞–∫—Å–∏-–±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π '
            f'–Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –≤—ã –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ, –∞ –≥–ª–∞–≤–Ω–æ–µ –¥–µ—à–µ–≤–æ –¥–æ–µ—Ö–∞–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ –≤–∞–º –º–µ—Å—Ç–æ.\n'
            f'<b>Transfer</b> –≤—ã–≥–æ–¥–µ–Ω –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è '
            f'–∫–∞–∫–æ–≥–æ –ª–∏–±–æ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –Ω–∏—Ö.',
            reply_markup=inline.check_status_btns(),
            parse_mode='html'
        )


async def profile(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)
    user_data = (await db_select.profile_data(message.from_user.id))

    if user_data[0] == 'pass':

        await message.answer(
            f'ü§ñ –í–∞—à ID: <b>{user_data[1][0]}</b>\n'
            f'üë§ –§–ò–û: <b>{user_data[1][1]}\n</b>'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_data[1][2]}</b>\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data[1][3]}</b> —Ä—É–±'
            f'<a href=\"https://i.ibb.co/9sfJy3J/image.png\">.</a>',
            parse_mode='html',
            reply_markup=inline.profile_passenger_btn()
        )
    else:
        await message.answer(
            f'ü§ñ –í–∞—à ID: <b>{user_data[1][0]}</b>\n'
            f'üë§ –§–ò–û: <b>{user_data[1][1]}</b>\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_data[1][2]}</b>\n\n'
            f'üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: <b>{user_data[1][3]}</b>\n'
            f'üöï –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>{user_data[1][4]}</b>\n'
            f'‚õ∞Ô∏è –†–µ—Å–ø—É–±–ª–∏–∫–∞: <b>{user_data[1][5]}</b>\n'
            f'üíµ –ë–∞–ª–∞–Ω—Å: <b>{user_data[1][6]}</b> —Ä—É–±\n'
            f'<a href=\"https://i.ibb.co/9sfJy3J/image.png\">.</a>',
            parse_mode='html',
            reply_markup=inline.profile_driver_btn()
        )


async def change_order(message: Message, state: FSMContext):

    async with state.proxy() as proxy:

        if proxy['changed'] == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª_–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤':
            await db_update.update_name_from_driver(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–ù–∞–¥–∏—á–∏–µ –±–∞–≥–∞–∂–∞':
            await db_update.update_balance_from_driver(message.text, int(proxy['user_id']))
            await message.answer(
                '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                reply_markup=reply.profile_passenger_markup()
            )

        await state.reset_state(with_data=True)


async def order_delivery(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –ª–∏–±–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é',
        reply_markup=reply.set_current_locale()
    )

    await DeliveryFSM.current_delivery_location.set()


async def order_taxi(message: Message, state: FSMContext):
    user_balance = await db_select.balance_by_user(message.from_user.id)

    if await db_select.check_wrong_status_to_cancel(message.from_user.id):
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
        return

    elif user_balance < 0:
        await message.answer('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏')
        return
    else:
        await message.answer(
            "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ–µ–¥–µ—Ç.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–æ"
        )

    await state.reset_state(with_data=True)

    await UserLocationFSM.numbers_of_users.set()


async def back(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)

    await message.answer(
        '–í–µ—Ä–Ω—É–ª—Å—è',
        reply_markup=reply.profile_passenger_markup()
    )


async def support(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    await message.answer(
        f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ {admin_link}\n'
        '–û—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞!'
    )


async def active_orders(message: Message, state: FSMContext):

    await state.reset_state(with_data=True)

    republic = await db_select.republic_by_driver(message.from_user.id)

    orders = await db_select.all_active_orders(republic)

    if not orders:
        await message.answer(
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç'
        )

    for order in orders:
        await message.answer(
            f'–ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n\n'
            f'–û—Ç–∫—É–¥–∞: {order[1]}\n\n'
            f'–ö—É–¥–∞: {order[2]}\n\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {order[-2]}\n'
            f'{order[-1]}\n\n'
            f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {order[3]} –∫–º.\n'
            f'–û–ø–ª–∞—Ç–∞: {order[4]} —Ä—É–±.\n'
            f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {order[8]}\n'
            f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {"–ù–∞–ª–∏—á–Ω—ã–µ" if order[9] == "cash" else "–° –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞"}',
            reply_markup=inline.responde_order(order)
        )


async def change_republics(callback: CallbackQuery):
    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )
    await bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å–ø—É–±–ª–∏–∫—É:",
        reply_markup=reply.all_republics()
    )

    await ChangeRepublicFSM.republic.set()


async def new_republic(message: Message, state: FSMContext):

    await db_update.change_region(
        message.from_user.id,
        message.text
    )

    await message.answer(
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',
        reply_markup=reply.profile_driver_markup()
    )

    await state.reset_state(with_data=True)


async def education(message: Message):

    await message.reply_document(
        document='BQACAgIAAxkBAAIHfmQkZmslL8QnV21XY5qbR7sPFVb_AAJbLQAC2xsgSREfCe7Z9b3jLwQ'
    )


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(education, content_types=['document'])
    dp.register_message_handler(star_login, commands=['start'], state='*')
    dp.register_message_handler(profile, lambda msg: msg.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', state="*")
    dp.register_message_handler(order_delivery, lambda mes: mes.text == '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', state="*")
    dp.register_message_handler(order_taxi, lambda mes: mes.text == 'üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏', state="*")
    dp.register_message_handler(active_orders, lambda mes: mes.text == 'üöï –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', state="*")
    dp.register_message_handler(support, lambda mes: mes.text == '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', state="*")
    dp.register_message_handler(education, lambda mes: mes.text == 'üìÑ –û–±—É—á–µ–Ω–∏–µ', state="*")
    dp.register_message_handler(back, lambda mes: mes.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', state='*')

    dp.register_callback_query_handler(change_republics, text='change_region')
    dp.register_message_handler(new_republic, state=ChangeRepublicFSM.republic)

    register_order_tools_handlers(dp)
    register_create_order_handlers(dp)
    register_login_handlers(dp)
    registration_withdrow_handlers(dp)
    register_refill_handlers(dp)
