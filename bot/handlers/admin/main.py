from asyncio import Lock
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext

import bot.Database.methods.get as db_select
import bot.Database.methods.update as db_update

import bot.keyboards.inline as inline
import bot.keyboards.reply as reply

from bot.env import *
from bot.handlers.utils import *
from bot.states import *

lock = Lock()


async def search_user(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '
    )

    await SearchPassengerFSM.name.set()


async def data_of_passenger(message: Message, state: FSMContext):
    user_data = await db_select.information_by_user(message.text)

    if user_data:
        await message.answer(
            f'ü§ñ ID: <b>{user_data[1]}</b>\n'
            f'üë§ –§–ò–û: <b>{user_data[2]}\n</b>'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_data[3]}</b>\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data[-1]}</b> —Ä—É–±',
            parse_mode='html',
            reply_markup=inline.change_user(message.text)
        )
    else:
        await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞'
        )

    await state.reset_state(with_data=True)
    await ChangeDataUserFSM.user_id.set()


async def change_user(callback: CallbackQuery, state: FSMContext):

    async with state.proxy() as proxy:
        proxy['user_id'] = int(callback.data.split(':')[1])

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    await bot.send_message(
        callback.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å \n',
        reply_markup=reply.change_user_list()
    )

    await ChangeDataUserFSM.next()


async def changed_user(message: Message, state: FSMContext):

    async with state.proxy() as proxy:
        proxy['changed'] = message.text

    await message.answer(
        '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
        reply_markup=ReplyKeyboardRemove()
    )

    await ChangeDataUserFSM.next()


async def update_user_data(message: Message, state: FSMContext):
    async with state.proxy() as proxy:

        if proxy['changed'] == '–§–ò–û':
            await db_update.update_name_from_user(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–¢–µ–ª–µ—Ñ–æ–Ω':
            await db_update.update_phone_from_user(message.text, int(proxy['user_id']))
        else:
            await db_update.update_balance_from_user(message.text, int(proxy['user_id']))

        await message.answer(
            '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            reply_markup=reply.admin_panel_btns()
        )

    await state.reset_state(with_data=True)

#----------------------------------------------------------------


async def search_driver(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ id –≤–æ–¥–∏—Ç–µ–ª—è: '
    )

    await SearchDriverFSM.name.set()


async def data_of_driver(message: Message, state: FSMContext):

    driver_data = await db_select.information_by_driver(message.text)

    if driver_data:
        await message.answer(
            f'ü§ñ ID: <b>{driver_data[1]}</b>\n'
            f'üë§ –§–ò–û: <b>{driver_data[2]}</b>\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{driver_data[5]}</b>\n\n'
            f'üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: <b>{driver_data[3]}</b>\n'
            f'üöï –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>{driver_data[4]}</b>\n'
            f'‚õ∞ –†–µ—Å–ø—É–±–ª–∏–∫–∞: <b>{driver_data[8]}</b>\n'
            f'üíµ –ë–∞–ª–∞–Ω—Å: <b>{driver_data[9]}</b> —Ä—É–±\n',
            parse_mode='html',
            reply_markup=inline.change_user(message.text)
        )
    else:
        await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è'
        )

    await state.reset_state(with_data=True)
    await ChangeDataDriverFSM.user_id.set()


async def change_driver(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['user_id'] = int(callback.data.split(':')[1])

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    await bot.send_message(
        callback.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å \n',
        reply_markup=reply.change_driver_list()
    )

    await ChangeDataDriverFSM.next()


async def changed_driver(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['changed'] = message.text

    if message.text == '–†–µ—Å–ø—É–±–ª–∏–∫–∞':
        await message.answer(
            '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
            reply_markup=reply.all_republics()
        )
    else:
        await message.answer(
            '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
            reply_markup=ReplyKeyboardRemove()
        )

    await ChangeDataDriverFSM.next()


async def update_driver_data(message: Message, state: FSMContext):
    async with state.proxy() as proxy:

        if proxy['changed'] == '–§–ò–û':
            await db_update.update_name_from_driver(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–¢–µ–ª–µ—Ñ–æ–Ω':
            await db_update.update_phone_from_driver(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–ë–∞–ª–∞–Ω—Å':
            await db_update.update_balance_from_driver(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã':
            await db_update.update_mark_from_driver(message.text, int(proxy['user_id']))
        elif proxy['changed'] == '–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã':
            await db_update.update_car_number_from_driver(message.text, int(proxy['user_id']))
        else:
            await db_update.update_republic_from_driver(message.text, int(proxy['user_id']))

        await message.answer(
            '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            reply_markup=reply.admin_panel_btns()
        )

    await state.reset_state(with_data=True)


#-----------------------------------------------------------------------

async def orders(message: Message, state: FSMContext):
    await state.reset_state(with_data=True)

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑',
        reply_markup=reply.orders_btns()
    )


async def orders_by_republic(message: Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å–ø—É–±–ª–∏–∫—É',
        reply_markup=reply.all_republics()
    )

    await OrdersByRepublicFSM.republic.set()


async def status_order(message: Message, state: FSMContext):

    async with state.proxy() as proxy:
        proxy['republic'] = message.text

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å',
        reply_markup=reply.status_orders()
    )

    await OrdersByRepublicFSM.next()


async def orders_by_data(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        orders = await db_select.orders_by_status_and_republic(proxy['republic'], orders_data[message.text])

        if orders:
            for order in orders:
                await message.answer(
                    f'–ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n\n'
                    f'–û—Ç–∫—É–¥–∞: {order[1]}\n\n'
                    f'–ö—É–¥–∞: {order[2]}\n\n'
                    f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {order[3]} –∫–º.\n'
                    f'–í—Ä–µ–º—è: {order[-4]} —á.\n'
                    f'–û–ø–ª–∞—Ç–∞: {order[4]} —Ä—É–±.\n'
                    f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {order[8]}\n'
                    f'–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order[-3]}\n'
                    f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {"–ù–∞–ª–∏—á–Ω—ã–µ" if order[9] == "cash" else "–° –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞"}',
                    reply_markup=reply.admin_panel_btns()
                )
        else:
            await message.answer(
                '–ù–µ—Ç —Ç–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
                reply_markup=reply.admin_panel_btns()
            )
    await state.reset_state(with_data=True)


async def order_by_id(message: Message):
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ id –∑–∞–∫–∞–∑–∞:',
        reply_markup=ReplyKeyboardRemove()
    )

    await OrderByIdFSM.id.set()


async def order_by_id_answer(message: Message, state: FSMContext):

    if not message.text.isdigit():
        await message.answer('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')

    order = await db_select.information_by_order(int(message.text))

    if order:
        await message.answer(
            f'–ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n\n'
            f'–û—Ç–∫—É–¥–∞: {order[1]}\n\n'
            f'–ö—É–¥–∞: {order[2]}\n\n'
            f'–°—Ç–∞—Ç—É—Å: {get_key(order[6])}\n\n'
            f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {order[3]} –∫–º.\n'
            f'–í—Ä–µ–º—è: {order[-2]} —á.\n'
            f'–û–ø–ª–∞—Ç–∞: {order[4]} —Ä—É–±.\n'
            f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {order[8]}\n'
            f'–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order[-1]}\n'
            f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {"–ù–∞–ª–∏—á–Ω—ã–µ" if order[9] == "cash" else "–° –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞"}',
            reply_markup=reply.admin_panel_btns()
        )
    else:
        await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞',
            reply_markup=reply.admin_panel_btns()
        )

    await state.reset_state(with_data=True)


async def swap(message: Message):
    await message.answer(
        '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start',
        reply_markup=reply.profile_passenger_markup()
    )


async def send_all_withdraw(message: Message):
    withdraws = await db_select.all_withdraws()

    for withdraw in withdraws:
        await message.answer(
            f'Id: {withdraw[0]} \n\n'
            f'Id —é–∑–µ—Ä–∞: {withdraw[1]} \n'
            f'–°—É–º–º–∞: {withdraw[2]} —Ä—É–±. \n'
            f'–ë–∞–Ω–∫: {"–°–±–µ—Ä–±–∞–Ω–∫" if withdraw[3] == "sber" else "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"} \n'
            f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {withdraw[4]}',
            reply_markup=inline.withdraw_items(withdraw[0])
        )

    await WithdrawFSM.id_withdraw.set()


async def change_status_to_withdraw(callback: CallbackQuery, state: FSMContext):

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    async with state.proxy() as proxy:
        proxy['id_withdraw'] = callback.data.split(":")[1]

    await bot.send_message(
        callback.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å',
        reply_markup=reply.status_withdraws()
    )

    await WithdrawFSM.status.set()


async def update_status_to_withdraw(message: Message, state: FSMContext):

    async with state.proxy() as proxy:
        await db_update.update_status_from_withdraw(message.text ,proxy.get('id_withdraw'))

    await message.answer(
        '–ì–æ—Ç–æ–≤–æ',
        reply_markup=reply.admin_panel_btns()
    )

    await state.reset_state(with_data=True)


def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(search_user, lambda mes: mes.text == '–ò—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state='*')
    dp.register_message_handler(search_driver, lambda mes: mes.text == '–ò—Å–∫–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', state='*')
    dp.register_message_handler(orders, lambda mes: mes.text == '–ó–∞–∫–∞–∑—ã', state='*')
    dp.register_message_handler(send_all_withdraw, lambda mes: mes.text == '–í—ã–≤–æ–¥—ã', state='*')
    dp.register_message_handler(swap, lambda mes: mes.text == '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞', state='*')

    dp.register_message_handler(data_of_passenger, state=SearchPassengerFSM.name)
    dp.register_callback_query_handler(change_user, state=ChangeDataUserFSM.user_id)
    dp.register_message_handler(changed_user, state=ChangeDataUserFSM.changed)
    dp.register_message_handler(update_user_data, state=ChangeDataUserFSM.data)

    dp.register_message_handler(data_of_driver, state=SearchDriverFSM.name)
    dp.register_callback_query_handler(change_driver, state=ChangeDataDriverFSM.user_id)
    dp.register_message_handler(changed_driver, state=ChangeDataDriverFSM.changed)
    dp.register_message_handler(update_driver_data, state=ChangeDataDriverFSM.data)

    dp.register_message_handler(orders_by_republic, lambda mes: mes.text == '–ü–æ —Ä–µ—Å–ø—É–±–ª–∏–∫–µ')
    dp.register_message_handler(status_order, state=OrdersByRepublicFSM.republic)
    dp.register_message_handler(orders_by_data, state=OrdersByRepublicFSM.status)

    dp.register_message_handler(order_by_id, lambda mes: mes.text == '–ü–æ id')
    dp.register_message_handler(order_by_id_answer, state=OrderByIdFSM.id)

    dp.register_callback_query_handler(change_status_to_withdraw, state=WithdrawFSM.id_withdraw)#inline.withdraw.filter(data='change_withdraw'))
    dp.register_message_handler(update_status_to_withdraw, state=WithdrawFSM.status)
